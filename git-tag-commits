#!/usr/bin/env python

from optparse import OptionParser

#
# A helper for adding source control tags to the subject 
# line of commit messages.
#
# For example, adding ' [ISSUE-1]' to the last 3 commits:
#
#   git-tag-commits HEAD~2 --add-suffix ISSUE-1
#

import os
import sys
import tempfile
import cPickle

EDITOR="EDITOR.TEMP"

class TempFile(object):
    filename = None

    class Info(dict):
        def __init__(self):
            self.nr_commits = 0
            self.cur_commit = 0
            self.remove = ''
            self.add = ''
            self.is_suffix = False

    @classmethod
    def write(selfclass, v):
        f = open(selfclass.tempfile, "w")
        f.write(v)
        f.close()

    @classmethod
    def read(selfclass):
        return open(selfclass.tempfile).read()

    @staticmethod
    def load():
        info = TempFile.Info()
        vars(info).update(cPickle.loads(TempFile.read()))
        return info

    @staticmethod
    def save(info):
        TempFile.write(cPickle.dumps(vars(info)))

def editor_rebase_todo(filename):
    output = []
    f = open(filename)
    for line in f:
        if line.startswith('pick'):
            line = 'reword ' + line[5:]
            print line,
            output.append(line)
    f.close()
    f = open(filename, "w")
    f.write(''.join(output))
    f.close()
    info = TempFile.load()
    info.cur_commit = 1
    info.nr_commits = len(output)
    TempFile.save(info)

def editor_commit_editmsg(filename):
    info = TempFile.load()
    lines = file(filename).read().splitlines()
    output = []
    idx = 0

    for line in lines:
        if idx == 0:
            if info.remove:
                for remove in [" [" + info.remove + "]",
                               "[" + info.remove + "] "]:
                    if remove in line:
                        line = line.replace(remove, "")
            if info.add:
                add1 = "[" + info.add + "] "
                add2 = " [" + info.add + "]"
                if add1 not in line and add2 not in line:
                    if info.is_suffix:
                        line += add2
                    else:
                        line = add1 + line
        output.append(line)
        idx += 1

    info.cur_commit += 1
    f = open(filename, "w")
    f.write('\n'.join(output))
    f.close()

    TempFile.save(info)

def main():
    if len(sys.argv) >= 4 and sys.argv[1] == EDITOR:
        TempFile.tempfile = sys.argv[2]
        filename = sys.argv[3]
        if filename.endswith('-todo'):
            editor_rebase_todo(filename)
        if filename.endswith('/COMMIT_EDITMSG'):
            editor_commit_editmsg(filename)
        return

    parser = OptionParser(usage="usage: %prog [options] [files]")
    parser.add_option(
        "-r", "--remove",
        dest="remove")

    parser.add_option(
        "-a", "--add-suffix",
        dest="add_suffix")

    parser.add_option(
        "-A", "--add-prefix",
        dest="add_prefix")

    (options, args) = parser.parse_args()

    info = TempFile.Info()
    info.remove = options.remove
    if options.add_suffix:
        info.is_suffix = True
        info.add = options.add_suffix
    if options.add_prefix:
        info.add = options.add_prefix
    TempFile.tempfile = tempfile.mktemp("git-tag-commits")
    TempFile.save(info)
    try:
        os.putenv("GIT_EDITOR", sys.argv[0] + " " + EDITOR + " " + TempFile.tempfile)
        cmd = ["git", "rebase", "-i"] + args
        os.spawnvp(os.P_WAIT, "git", cmd)
    finally:
        os.unlink(TempFile.tempfile)

if __name__ == "__main__":
    main()
